# [advice from AI] Timbel CICD Operator Solution - 로컬호스트 전용 Docker 환경
# Jenkins, Nexus, ArgoCD 포함 완전한 CI/CD 스택

version: '3.8'

services:
  # Frontend - React 18 + TypeScript + Material-UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_WS_URL=ws://localhost:3001
      - VITE_API_URL=http://localhost:3001
      - NODE_ENV=development
      - DISABLE_ESLINT_PLUGIN=true
      - GENERATE_SOURCEMAP=false
      - HOST=0.0.0.0
      - PORT=3000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - timbel-network

  # Backend - Node.js + Express
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://timbel_user:timbel_password@postgres:5432/timbel_cicd_operator
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=timbel_user
      - DB_PASSWORD=timbel_password
      - DB_NAME=timbel_cicd_operator
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=development
      - JWT_SECRET=timbel-super-secret-jwt-key-change-in-production
      - PORT=3001
      - JENKINS_URL=http://jenkins:8080
      - JENKINS_USER=admin
      - JENKINS_TOKEN=admin
      - NEXUS_URL=http://nexus:8081
      - ARGOCD_URL=http://argocd-server:8080
      - ENABLE_SCHEDULER=true
      - SCHEDULER_TIMEZONE=Asia/Seoul
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - timbel-network

  # PostgreSQL - 주 데이터베이스
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=timbel_cicd_operator
      - POSTGRES_USER=timbel_user
      - POSTGRES_PASSWORD=timbel_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/operations-only-schema.sql:/docker-entrypoint-initdb.d/01-init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timbel_user -d timbel_cicd_operator"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - timbel-network

  # Redis - 세션 관리 및 캐싱
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - timbel-network

  # Jenkins - CI/CD 자동화
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS=--prefix=/jenkins
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Xmx1g
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    user: root
    networks:
      - timbel-network

  # Nexus - 아티팩트 저장소
  nexus:
    image: sonatype/nexus3:latest
    ports:
      - "8081:8081"
      - "8082:8082"
    environment:
      - INSTALL4J_ADD_VM_PARAMS=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=512m
    volumes:
      - nexus_data:/nexus-data
    restart: unless-stopped
    networks:
      - timbel-network

  # Note: Kind 클러스터와 ArgoCD는 호스트에 직접 설치됩니다.
  # setup-kind-cluster.sh 스크립트를 실행하여 설치하세요.

  # Prometheus - 메트릭 수집
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - timbel-network

  # Grafana - 모니터링 대시보드
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3003
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - timbel-network

volumes:
  postgres_data:
  redis_data:
  jenkins_data:
  nexus_data:
  prometheus_data:
  grafana_data:
  frontend_node_modules:

networks:
  timbel-network:
    driver: bridge

