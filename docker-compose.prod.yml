# [advice from AI] 프로덕션 레벨 Docker Compose 설정
# 로드 밸런싱, 클러스터링, 고가용성을 위한 설정

version: '3.8'

services:
  # [advice from AI] Nginx 로드 밸런서
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # [advice from AI] 백엔드 서버 클러스터 (3개 인스턴스)
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - INSTANCE_ID=backend-1
      - CLUSTER_MODE=true
      - DB_POOL_MAX=10
      - REDIS_HOST=redis-cluster
      - ENABLE_COMPRESSION=true
      - ENABLE_CACHE=true
    volumes:
      - backend_logs:/app/logs
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - INSTANCE_ID=backend-2
      - CLUSTER_MODE=true
      - DB_POOL_MAX=10
      - REDIS_HOST=redis-cluster
      - ENABLE_COMPRESSION=true
      - ENABLE_CACHE=true
    volumes:
      - backend_logs:/app/logs
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend-3:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - INSTANCE_ID=backend-3
      - CLUSTER_MODE=true
      - DB_POOL_MAX=10
      - REDIS_HOST=redis-cluster
      - ENABLE_COMPRESSION=true
      - ENABLE_CACHE=true
    volumes:
      - backend_logs:/app/logs
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # [advice from AI] 프론트엔드 (정적 파일 서빙)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - frontend_build:/app/build
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # [advice from AI] PostgreSQL 마스터-슬레이브 구성
  postgres-master:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=timbel_user
      - POSTGRES_PASSWORD=timbel_password
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replicator_password
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./database/postgresql.master.conf:/etc/postgresql/postgresql.conf
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timbel_user"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres-slave:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=timbel_user
      - POSTGRES_PASSWORD=timbel_password
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=replicator_password
      - POSTGRES_MASTER_HOST=postgres-master
    volumes:
      - postgres_slave_data:/var/lib/postgresql/data
      - ./database/postgresql.slave.conf:/etc/postgresql/postgresql.conf
    networks:
      - timbel-network
    restart: unless-stopped
    depends_on:
      - postgres-master
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timbel_user"]
      interval: 30s
      timeout: 10s
      retries: 5

  # [advice from AI] Redis 클러스터
  redis-cluster:
    image: redis:7-alpine
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    volumes:
      - redis_cluster_data:/data
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # [advice from AI] Elasticsearch 클러스터 (로그 검색)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # [advice from AI] Logstash (로그 파이프라인)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - backend_logs:/app/logs:ro
    networks:
      - timbel-network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # [advice from AI] Kibana (로그 시각화)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - timbel-network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # [advice from AI] Prometheus (메트릭 수집)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # [advice from AI] Grafana (메트릭 시각화)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - timbel-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # [advice from AI] Jenkins (CI/CD)
  jenkins-master:
    image: jenkins/jenkins:lts-jdk17
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Xmx2g
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/login"]
      interval: 60s
      timeout: 30s
      retries: 3

  # [advice from AI] Nexus Repository (아티팩트 저장소)
  nexus:
    image: sonatype/nexus3:latest
    ports:
      - "8081:8081"
    environment:
      - INSTALL4J_ADD_VM_PARAMS=-Xms2g -Xmx2g -XX:MaxDirectMemorySize=3g
    volumes:
      - nexus_data:/nexus-data
    networks:
      - timbel-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 3G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status"]
      interval: 60s
      timeout: 30s
      retries: 5

volumes:
  postgres_master_data:
  postgres_slave_data:
  redis_cluster_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  jenkins_data:
  nexus_data:
  backend_logs:
  frontend_build:

networks:
  timbel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
