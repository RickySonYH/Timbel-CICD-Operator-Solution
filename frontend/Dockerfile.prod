# [advice from AI] 프로덕션 레벨 프론트엔드 Dockerfile
# 멀티스테이지 빌드, 최적화된 정적 파일 생성

# ===== 빌드 스테이지 =====
FROM node:18-alpine AS builder

# 작업 디렉토리 설정
WORKDIR /app

# 패키지 파일 복사 (캐시 최적화)
COPY package*.json ./

# [advice from AI] 의존성 설치 (빌드 도구 포함)
RUN npm ci --silent && \
    npm cache clean --force

# 소스 코드 복사
COPY . .

# [advice from AI] 환경 변수 설정 (프로덕션 빌드)
ENV NODE_ENV=production \
    REACT_APP_API_URL=/api \
    GENERATE_SOURCEMAP=false \
    INLINE_RUNTIME_CHUNK=false

# [advice from AI] 프로덕션 빌드 생성
RUN npm run build

# [advice from AI] 빌드 결과물 최적화
RUN find build -name "*.map" -type f -delete && \
    find build -name "*.txt" -type f -delete

# ===== 프로덕션 스테이지 (Nginx) =====
FROM nginx:alpine AS production

# 보안 업데이트
RUN apk update && apk upgrade && \
    apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

# [advice from AI] Nginx 설정 복사
COPY nginx/nginx.frontend.conf /etc/nginx/conf.d/default.conf

# [advice from AI] 빌드된 정적 파일 복사
COPY --from=builder /app/build /usr/share/nginx/html

# [advice from AI] 권한 설정
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# [advice from AI] 헬스체크 설정
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# 포트 노출
EXPOSE 80

# [advice from AI] Nginx 시작
CMD ["nginx", "-g", "daemon off;"]
