# [advice from AI] 프로덕션 레벨 Nginx 로드 밸런서 설정
# 고가용성, 로드 밸런싱, SSL/TLS, 캐싱, 보안 최적화

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# [advice from AI] 성능 최적화 설정
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # [advice from AI] 로그 형식 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # [advice from AI] 성능 최적화 설정
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;

    # [advice from AI] 압축 설정
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # [advice from AI] 보안 헤더
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' ws: wss:";

    # [advice from AI] 클라이언트 요청 크기 제한
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # [advice from AI] 프록시 설정
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    proxy_temp_file_write_size 8k;
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;

    # [advice from AI] 백엔드 서버 업스트림 (로드 밸런싱)
    upstream backend_cluster {
        least_conn;  # 최소 연결 수 기반 로드 밸런싱
        
        server backend-1:3001 max_fails=3 fail_timeout=30s weight=1;
        server backend-2:3001 max_fails=3 fail_timeout=30s weight=1;
        server backend-3:3001 max_fails=3 fail_timeout=30s weight=1;
        
        # [advice from AI] 헬스 체크 (nginx-plus에서 지원)
        # health_check interval=10s fails=3 passes=2;
        
        keepalive 32;
    }

    # [advice from AI] 캐싱 설정
    proxy_cache_path /var/cache/nginx/api 
                     levels=1:2 
                     keys_zone=api_cache:10m 
                     max_size=1g 
                     inactive=60m 
                     use_temp_path=off;

    proxy_cache_path /var/cache/nginx/static 
                     levels=1:2 
                     keys_zone=static_cache:10m 
                     max_size=2g 
                     inactive=1d 
                     use_temp_path=off;

    # [advice from AI] Rate Limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;

    # [advice from AI] 메인 서버 블록
    server {
        listen 80;
        server_name localhost timbel.net www.timbel.net;

        # [advice from AI] HTTP to HTTPS 리다이렉트 (프로덕션에서)
        # return 301 https://$server_name$request_uri;

        # [advice from AI] 헬스 체크 엔드포인트
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # [advice from AI] 정적 파일 서빙 (프론트엔드)
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
            
            # 정적 파일 캐싱
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary Accept-Encoding;
                
                proxy_cache static_cache;
                proxy_cache_valid 200 1d;
                proxy_cache_use_stale error timeout invalid_header updating;
            }
        }

        # [advice from AI] API 프록시 (백엔드 클러스터)
        location /api/ {
            # Rate Limiting 적용
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://backend_cluster;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Nginx-Proxy true;
            
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;

            # [advice from AI] API 응답 캐싱 (선택적)
            location ~* ^/api/(dashboard|statistics|reference)/ {
                proxy_pass http://backend_cluster;
                
                proxy_cache api_cache;
                proxy_cache_valid 200 5m;
                proxy_cache_valid 404 1m;
                proxy_cache_use_stale error timeout invalid_header updating;
                proxy_cache_key "$scheme$request_method$host$request_uri";
                
                add_header X-Cache-Status $upstream_cache_status;
            }

            # [advice from AI] 인증 API 특별 처리
            location /api/auth/ {
                limit_req zone=auth_limit burst=10 nodelay;
                
                proxy_pass http://backend_cluster;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # 인증 API는 캐싱하지 않음
                proxy_no_cache 1;
                proxy_cache_bypass 1;
            }
        }

        # [advice from AI] 업로드된 파일 서빙
        location /uploads/ {
            alias /app/uploads/;
            expires 1d;
            add_header Cache-Control "public";
            
            # 보안: 실행 파일 차단
            location ~* \.(php|jsp|asp|sh|py|pl|exe)$ {
                deny all;
            }
        }

        # [advice from AI] 모니터링 도구 프록시
        location /grafana/ {
            proxy_pass http://grafana:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /kibana/ {
            proxy_pass http://kibana:5601/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # [advice from AI] 보안 설정
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # [advice from AI] 에러 페이지
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # [advice from AI] HTTPS 서버 블록 (프로덕션용)
    # server {
    #     listen 443 ssl http2;
    #     server_name timbel.net www.timbel.net;
    #     
    #     ssl_certificate /etc/nginx/ssl/timbel.crt;
    #     ssl_certificate_key /etc/nginx/ssl/timbel.key;
    #     
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     
    #     # 위의 location 블록들을 여기에도 복사
    # }

    # [advice from AI] 상태 모니터링 서버
    server {
        listen 8080;
        server_name localhost;
        
        access_log off;
        
        location /nginx_status {
            stub_status on;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker 네트워크
            deny all;
        }
        
        location /health {
            return 200 "OK";
            add_header Content-Type text/plain;
        }
    }
}

# [advice from AI] 스트림 프록시 (TCP/UDP 로드 밸런싱)
stream {
    # PostgreSQL 로드 밸런싱
    upstream postgres_cluster {
        server postgres-master:5432 weight=3;
        server postgres-slave:5432 weight=1;
    }
    
    server {
        listen 5432;
        proxy_pass postgres_cluster;
        proxy_timeout 1s;
        proxy_responses 1;
    }
}
