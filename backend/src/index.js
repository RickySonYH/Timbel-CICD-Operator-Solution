// [advice from AI] Timbel ÌîåÎû´Ìèº Î©îÏù∏ ÏÑúÎ≤Ñ - JavaScript Î≤ÑÏ†Ñ
// TypeScript Ïò§Î•ò Ìï¥Í≤∞ÏùÑ ÏúÑÌï¥ JavaScriptÎ°ú Î≥ÄÌôò

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const dotenv = require('dotenv');
const axios = require('axios');
const bcrypt = require('bcrypt');
const { Pool } = require('pg');

// [advice from AI] ÏÑ∏ÏÖò Í∏∞Î∞ò Ïù∏Ï¶ù ÎØ∏Îì§Ïõ®Ïñ¥
const SessionAuthMiddleware = require('./middleware/sessionAuth');

// ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
dotenv.config();

// [advice from AI] PostgreSQL Ïó∞Í≤∞ ÏÑ§Ï†ï
const pool = new Pool({
  user: process.env.DB_USER || 'timbel_user',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'timbel_db',
  password: process.env.DB_PASSWORD || 'timbel_password',
  port: process.env.DB_PORT || 5434,
});

const app = express();
const PORT = process.env.PORT || 3001;

// [advice from AI] ÏÑ∏ÏÖò Ïù∏Ï¶ù ÎØ∏Îì§Ïõ®Ïñ¥ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const sessionAuth = new SessionAuthMiddleware();

// [advice from AI] Î≥¥Ïïà ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
app.use(helmet());
app.use(cors({
  origin: [
    'http://localhost:3000',
    'http://rdc.rickyson.com:3000',
    'http://localhost:3001'
  ],
  credentials: true // Ïø†ÌÇ§ Ï†ÑÏÜ° ÌóàÏö©
}));

// [advice from AI] ÏÑ∏ÏÖò ÎØ∏Îì§Ïõ®Ïñ¥ Ï†ÅÏö© (CORS Ïù¥ÌõÑ, ÎùºÏö∞Ìä∏ Ïù¥Ï†Ñ)
app.use(sessionAuth.getSessionMiddleware());

// [advice from AI] Rate limiting ÏÑ§Ï†ï - ÏûÑÏãú ÎπÑÌôúÏÑ±Ìôî
// const limiter = rateLimit({
//   windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'), // 15Î∂Ñ
//   max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100'),
//   message: 'Too many requests from this IP'
// });
// app.use(limiter);

// Í∏∞Î≥∏ ÎØ∏Îì§Ïõ®Ïñ¥
app.use(express.json({ limit: process.env.MAX_FILE_SIZE || '50mb' }));
app.use(express.urlencoded({ extended: true }));

// [advice from AI] Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    environment: process.env.NODE_ENV
  });
});

// [advice from AI] ÏÑ∏ÏÖò Í∏∞Î∞ò Ïù∏Ï¶ù API ÏóîÎìúÌè¨Ïù∏Ìä∏Îì§
app.get('/api/auth/me', (req, res) => {
  // [advice from AI] ÏÑ∏ÏÖòÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
  if (req.session && req.session.user) {
    return res.json({
      success: true,
      data: {
        user: req.session.user,
        sessionId: req.sessionID,
        lastActivity: req.session.lastActivity || req.session.user.loginTime
      }
    });
  }
  
  return res.status(401).json({ 
    success: false,
    error: 'Unauthorized',
    message: 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§' 
  });
});

app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, username, loginId, password } = req.body;
    
    // [advice from AI] Î°úÍ∑∏Ïù∏ ID Í≤∞Ï†ï (email, username, loginId Ï§ë ÌïòÎÇò)
    const identifier = email || username || loginId;
    
    if (!identifier || !password) {
      return res.status(400).json({
        success: false,
        error: 'Missing credentials',
        message: 'Ïù¥Î©îÏùº/ÏÇ¨Ïö©ÏûêÎ™ÖÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
      });
    }

    console.log(`üîê Î°úÍ∑∏Ïù∏ ÏãúÎèÑ: ${identifier}`);

    // [advice from AI] Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
    const result = await pool.query(`
      SELECT id, username, email, password_hash, full_name, role_type, permission_level, work_permissions
      FROM timbel_users 
      WHERE username = $1 OR email = $1
    `, [identifier]);

    if (result.rows.length === 0) {
      console.log(`‚ùå ÏÇ¨Ïö©Ïûê ÏóÜÏùå: ${identifier}`);
      return res.status(401).json({
        success: false,
        error: 'Invalid credentials',
        message: 'ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§'
      });
    }

    const user = result.rows[0];
    console.log(`üë§ ÏÇ¨Ïö©Ïûê Ï∞æÏùå: ${user.username} (${user.email})`);
    
    // [advice from AI] ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù
    const isValidPassword = await bcrypt.compare(password, user.password_hash);
    
    if (!isValidPassword) {
      console.log(`‚ùå ÎπÑÎ∞ÄÎ≤àÌò∏ Î∂àÏùºÏπò: ${identifier}`);
      return res.status(401).json({
        success: false,
        error: 'Invalid credentials',
        message: 'ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§'
      });
    }

    console.log(`‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ: ${user.username}`);

    // [advice from AI] ÏÑ∏ÏÖòÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû•
    req.session.user = {
      id: user.id,
      username: user.username,
      email: user.email,
      fullName: user.full_name,
      permissionLevel: user.permission_level,
      roleType: user.role_type,
      loginTime: new Date().toISOString()
    };
    
    req.session.lastActivity = new Date().toISOString();

    // [advice from AI] JWT ÌÜ†ÌÅ∞ ÏÉùÏÑ± (Í∞ÑÎã®ÌïòÍ≤å Ï†ïÎ¶¨)
    const jwt = require('jsonwebtoken');
    
    const jwtPayload = {
      userId: user.id,
      email: user.email,
      permissionLevel: user.permission_level,
      roleType: user.role_type,
      sessionId: req.sessionID
    };
    
    const jwtSettings = {
      expiresIn: '24h',
      issuer: 'timbel-platform',
      audience: 'timbel-users'
    };
    
    const jwtToken = jwt.sign(jwtPayload, process.env.JWT_SECRET || 'timbel-super-secret-jwt-key-change-in-production', jwtSettings);

    // [advice from AI] ÏÑ∏ÏÖò Ï†ÄÏû• ÌõÑ ÏùëÎãµ
    req.session.save((err) => {
      if (err) {
        console.error('ÏÑ∏ÏÖò Ï†ÄÏû• Ïò§Î•ò:', err);
        return res.status(500).json({
          success: false,
          error: 'Session Save Error',
          message: 'ÏÑ∏ÏÖò Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§'
        });
      }

      return res.json({
        success: true,
        data: {
          user: req.session.user,
          sessionId: req.sessionID,
          jwtToken: jwtToken,
          tokenType: 'Bearer',
          message: 'Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ'
        }
      });
    });
  } catch (error) {
    console.error('‚ùå Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ïò§Î•ò:', error);
    return res.status(500).json({
      success: false,
      error: 'Internal Server Error',
      message: 'Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§'
    });
  }
});

// [advice from AI] ÏÑ∏ÏÖò Í∏∞Î∞ò Î°úÍ∑∏ÏïÑÏõÉ
app.post('/api/auth/logout', async (req, res) => {
  try {
    if (req.session) {
      const userId = req.session.user?.id;
      await sessionAuth.destroySession(req);
      
      // [advice from AI] Ïø†ÌÇ§ ÏÇ≠Ï†ú
      res.clearCookie('timbel.sid');
      
      console.log(`üîí ÏÇ¨Ïö©Ïûê ${userId} Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å`);
      
      return res.json({
        success: true,
        message: 'Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§'
      });
    } else {
      return res.status(400).json({
        success: false,
        error: 'No Session',
        message: 'ÌôúÏÑ± ÏÑ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§'
      });
    }
  } catch (error) {
    console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïò§Î•ò:', error);
    return res.status(500).json({
      success: false,
      error: 'Logout Error',
      message: 'Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§'
    });
  }
});

// [advice from AI] ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏
app.get('/api/auth/session-status', (req, res) => {
  if (req.session && req.session.user) {
    const now = new Date();
    const lastActivity = new Date(req.session.lastActivity || req.session.user.loginTime);
    const sessionAge = Math.floor((now.getTime() - lastActivity.getTime()) / 1000); // Ï¥à Îã®ÏúÑ
    
    return res.json({
      success: true,
      data: {
        authenticated: true,
        sessionId: req.sessionID,
        user: req.session.user,
        sessionAge: sessionAge,
        maxAge: sessionAuth.sessionConfig.cookie.maxAge / 1000,
        lastActivity: req.session.lastActivity
      }
    });
  }
  
  return res.json({
    success: true,
    data: {
      authenticated: false,
      message: 'ÏÑ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§'
    }
  });
});

// [advice from AI] RDC Í≥ÑÏÇ∞Í∏∞ ÏÑúÎπÑÏä§ ÏûÑÌè¨Ìä∏
const RDCCalculatorService = require('./services/rdcCalculatorService');
const rdcService = new RDCCalculatorService();

// [advice from AI] ÌïòÎìúÏõ®Ïñ¥ Î¶¨ÏÜåÏä§ Í≥ÑÏÇ∞ ÏóîÎìúÌè¨Ïù∏Ìä∏ (Fallback Ìè¨Ìï®)
app.post('/api/operations/calculate-resources', async (req, res) => {
  try {
    const { requirements, gpu_type = 'auto' } = req.body;
    
    if (!requirements) {
      return res.status(400).json({ 
        error: 'Requirements are required',
        message: 'ÏÑúÎπÑÏä§ ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
      });
    }

    console.log('ÌïòÎìúÏõ®Ïñ¥ Î¶¨ÏÜåÏä§ Í≥ÑÏÇ∞ ÏöîÏ≤≠:', { requirements, gpu_type });

    const result = await rdcService.calculateHardware(requirements, gpu_type);
    res.json(result);
    
  } catch (error) {
    console.error('ÌïòÎìúÏõ®Ïñ¥ Í≥ÑÏÇ∞ Ïò§Î•ò:', error);
    res.status(500).json({ 
      error: 'Hardware calculation failed',
      message: error.message
    });
  }
});

// [advice from AI] RDC ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/api/operations/service-status', async (req, res) => {
  try {
    const status = await rdcService.getServiceStatus();
    res.json(status);
  } catch (error) {
    console.error('ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏ Ïò§Î•ò:', error);
    res.status(500).json({ 
      error: 'Service status check failed',
      message: error.message
    });
  }
});

// [advice from AI] Í∏∞Ï°¥ RDC API ÌîÑÎ°ùÏãú ÏóîÎìúÌè¨Ïù∏Ìä∏ (Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)
app.post('/api/proxy/rdc-calculate', async (req, res) => {
  try {
    const requestData = req.body;
    
    if (!requestData) {
      return res.status(400).json({ error: 'Request data is required' });
    }

    console.log('RDC API ÌîÑÎ°ùÏãú Ìò∏Ï∂ú:', requestData);

    const result = await rdcService.calculateHardware(
      requestData.requirements, 
      requestData.gpu_type
    );
    
    res.json(result);
  } catch (error) {
    console.error('RDC API proxy error:', error);
    res.status(500).json({ 
      error: 'Failed to call RDC API',
      message: error.message
    });
  }
});

// [advice from AI] JWT Í∏∞Î∞ò Ïù∏Ï¶ù ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä
const authJWTRouter = require('./routes/authJWT');
app.use('/api/auth', authJWTRouter);

// [advice from AI] Ïπ¥ÌÉàÎ°úÍ∑∏ ÏãúÏä§ÌÖú ÎùºÏö∞Ìä∏
const catalogRouter = require('./routes/catalog');
app.use('/api/catalog', catalogRouter);

// [advice from AI] ÏãúÏä§ÌÖú Í¥ÄÎ¶¨ ÎùºÏö∞Ìä∏
const adminRouter = require('./routes/admin');
app.use('/api/admin', adminRouter);

// [advice from AI] ÎîîÏûêÏù∏ ÏûêÏÇ∞ ÎùºÏö∞Ìä∏
const designAssetsRouter = require('./routes/designAssets');
app.use('/api/design-assets', designAssetsRouter);

// [advice from AI] ÏΩîÎìú Ïª¥Ìè¨ÎÑåÌä∏ ÎùºÏö∞Ìä∏

// [advice from AI] Î¨∏ÏÑú/Í∞ÄÏù¥Îìú ÎùºÏö∞Ìä∏
const documentsRouter = require('./routes/documents');
app.use('/api/documents', documentsRouter);

// [advice from AI] Ïö¥ÏòÅ ÏÑºÌÑ∞ ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä (JWT Ïù∏Ï¶ù Î≥¥Ìò∏)
const operationsRouter = require('./routes/operations');
app.use('/api/operations', operationsRouter);

// [advice from AI] QA/QC ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä (JWT Ïù∏Ï¶ù Î≥¥Ìò∏)
const qaRouter = require('./routes/qa');
app.use('/api/qa', qaRouter);

// [advice from AI] ECP-AI ÏãúÎÆ¨Î†àÏù¥ÌÑ∞ ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä (JWT Ïù∏Ï¶ù Î≥¥Ìò∏)
const simulatorRouter = require('./routes/simulator');
app.use('/api/simulator', simulatorRouter);

// [advice from AI] ÌÜµÌï© Î™®ÎãàÌÑ∞ÎßÅ ÎùºÏö∞Ìä∏
const monitoringRouter = require('./routes/monitoring');
const catalogCICDRouter = require('./routes/catalogCICD');
app.use('/api/monitoring', monitoringRouter);
app.use('/api/catalog/cicd', catalogCICDRouter);

// [advice from AI] ÏäπÏù∏ Î∞è ÏùòÏÇ¨Í≤∞Ï†ï ÎùºÏö∞Ìä∏
const approvalsRouter = require('./routes/approvals');
app.use('/api/approvals', approvalsRouter);

// [advice from AI] ÏßÄÏãù Ï∂îÏ∂ú ÎùºÏö∞Ìä∏
const knowledgeExtractionRouter = require('./routes/knowledgeExtraction');
app.use('/api/knowledge-extraction', knowledgeExtractionRouter);

// [advice from AI] ÏãúÏä§ÌÖú Í¥ÄÎ¶¨ ÎùºÏö∞Ìä∏
const systemsRouter = require('./routes/systems');
const relationshipsRouter = require('./routes/relationships');
const domainsRouter = require('./routes/domains');
const codeComponentsRouter = require('./routes/codeComponents');
app.use('/api/systems', systemsRouter);
app.use('/api/relationships', relationshipsRouter);
app.use('/api/domains', domainsRouter);
// [advice from AI] ÏΩîÎìú Ïª¥Ìè¨ÎÑåÌä∏ Îì±Î°ù Í¥ÄÎ¶¨Ïö© API (Î™®Îì† ÏÉÅÌÉú Ï°∞Ìöå)
app.use('/api/code-components', codeComponentsRouter);

// [advice from AI] Ï†ÑÏó≠ ÏóêÎü¨ Ìï∏Îì§Îü¨ Ï∂îÍ∞Ä
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  console.error('Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§:', error.stack);
  // ÏÑúÎ≤ÑÎ•º ÏïàÏ†ÑÌïòÍ≤å Ï¢ÖÎ£åÌïòÏßÄ ÏïäÍ≥† Î°úÍ∑∏Îßå Í∏∞Î°ù
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  // ÏÑúÎ≤ÑÎ•º ÏïàÏ†ÑÌïòÍ≤å Ï¢ÖÎ£åÌïòÏßÄ ÏïäÍ≥† Î°úÍ∑∏Îßå Í∏∞Î°ù
});

// [advice from AI] ÌîÑÎ°úÏ†ùÌä∏ API ÎùºÏö∞ÌÑ∞ Îì±Î°ù (Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ)
const projectsRouter = require('./routes/projects-simple');
app.use('/api/projects', projectsRouter);

// [advice from AI] Ìè¨Ìä∏ ÏÇ¨Ïö© Ï§ë ÏóêÎü¨ Ï≤òÎ¶¨
const server = app.listen(PORT, () => {
  console.log(`üöÄ Timbel ÌîåÎû´Ìèº ÏÑúÎ≤ÑÍ∞Ä Ìè¨Ìä∏ ${PORT}ÏóêÏÑú Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§`);
  console.log(`üìä ÌôòÍ≤Ω: ${process.env.NODE_ENV}`);
  console.log(`üîó Ìó¨Ïä§Ï≤¥ÌÅ¨: http://localhost:${PORT}/health`);
  console.log(`üöÄ Ïö¥ÏòÅ ÏÑºÌÑ∞ API: http://localhost:${PORT}/api/operations`);
  console.log(`üìÅ ÌîÑÎ°úÏ†ùÌä∏ API: http://localhost:${PORT}/api/projects`);
});

server.on('error', (error) => {
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå Ìè¨Ìä∏ ${PORT}Í∞Ä Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏûÖÎãàÎã§. Îã§Î•∏ Ìè¨Ìä∏Î•º ÏÇ¨Ïö©ÌïòÍ±∞ÎÇò Í∏∞Ï°¥ ÌîÑÎ°úÏÑ∏Ïä§Î•º Ï¢ÖÎ£åÌïòÏÑ∏Ïöî.`);
    process.exit(1);
  } else {
    console.error('‚ùå ÏÑúÎ≤Ñ Ïò§Î•ò:', error);
    throw error;
  }
});

// [advice from AI] ÏïàÏ†ÑÌïú ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ï≤òÎ¶¨
const gracefulShutdown = () => {
  console.log('üîÑ ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ïã†Ìò∏Î•º Î∞õÏïòÏäµÎãàÎã§. ÏïàÏ†ÑÌïòÍ≤å Ï¢ÖÎ£å Ï§ë...');
  server.close(() => {
    console.log('‚úÖ ÏÑúÎ≤ÑÍ∞Ä ÏïàÏ†ÑÌïòÍ≤å Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§.');
    process.exit(0);
  });
};

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
